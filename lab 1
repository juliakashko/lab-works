#include <iostream>
#include <cmath>
#include <exception>
#include <string>

class CustomException : public std::exception {
private:
    std::string message;
    double value;
    int errorCode;

public:
    CustomException(const std::string& msg, double val, int code)
        : message(msg), value(val), errorCode(code) {}

    const char* what() const noexcept override {
        return message.c_str();
    }

    double getValue() const {
        return value;
    }

    int getErrorCode() const {
        return errorCode;
    }
};

double calculateZ1(double& b) {
    double discriminant = b * b - 4;

    if (discriminant < 0) {
        throw CustomException("Negative discriminant in Z1 calculation", discriminant, 3);
    }

    double denominator = sqrt(discriminant) + b + 2;

    if (denominator == 0) {
        throw CustomException("Division by zero in Z1 calculation", denominator, 1);
    }

    return sqrt((2 * b + 2 * sqrt(discriminant)) / denominator);
}

double calculateZ2(double& b) {
    
    double z1 = calculateZ1(b);

   
    double denominator = sqrt(b + 2);

    if (denominator == 0) {
        throw CustomException("Division by zero in Z2 calculation", denominator, 2);
    }

    return 1 / denominator; 
}

int main() {
    double b;

    std::cout << "Enter b: ";
    std::cin >> b;

    try {
        double Z1 = calculateZ1(b);
        double Z2 = calculateZ2(b);

        std::cout << "Z1 = " << Z1 << std::endl;
        std::cout << "Z2 = " << Z2 << std::endl;

        if (fabs(Z1 - Z2) < 0.01) {
            std::cout << "These function are about the same." << std::endl;
        }
        else {
            std::cout << "These function are different" << std::endl;
        }
    }
    catch (const CustomException& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        std::cerr << "The cause of the error " << e.getValue() << std::endl;
        std::cerr << "The code of the error: " << e.getErrorCode() << std::endl;
    }

    return 0;
}
