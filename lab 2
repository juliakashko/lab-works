#include <iostream>
#include <initializer_list>
#include <stdexcept>
#include <string>

namespace containers {

    template <typename T>
    class Stack {
    public:
        struct Node {
            T value;
            Node* next;

            Node(const T& val) : value(val), next(nullptr) {}
        };

    private:
        Node* top; 
        size_t size; 
        Node* createNode(const T& value) {
            return new Node(value);
        }

    public:
       
        Stack() : top(nullptr), size(0) {}

        Stack(std::initializer_list<T> list) : Stack() {
            for (const auto& item : list) {
                push(item);
            }
        }
        Stack(const Stack& other) : Stack() {
            Node* current = other.top;
            while (current) {
                push(current->value);
                current = current->next;
            }
        }

    
        Stack& operator=(const Stack& other) {
            if (this != &other) {
                while (size > 0) {
                    pop();
                }
                Node* current = other.top;
                while (current) {
                    push(current->value);
                    current = current->next;
                }
            }
            return *this;
        }

        Stack(Stack&& other) noexcept : top(other.top), size(other.size) {
            other.top = nullptr;
            other.size = 0;
        }

      
        Stack& operator=(Stack&& other) noexcept {
            if (this != &other) {
                while (size > 0) {
                    pop();
                }
                top = other.top;
                size = other.size;
                other.top = nullptr;
                other.size = 0;
            }
            return *this;
        }


        ~Stack() {
            while (size > 0) {
                pop();
            }
        }

        
        void push(const T& value) {
            Node* newNode = createNode(value);
            newNode->next = top;
            top = newNode;
            size++;
        }

       
        void pop() {
            if (isEmpty()) {
                throw std::underflow_error("Stack is empty");
            }
            Node* temp = top;
            top = top->next;
            delete temp;
            size--;
        }

        
        T& peek() {
            if (isEmpty()) {
                throw std::underflow_error("Stack is empty");
            }
            return top->value;
        }

       
        bool isEmpty() const {
            return size == 0;
        }

       
        size_t getSize() const {
            return size;
        }
    };

} 

int main() {
    using namespace containers;

    Stack<int> intStack;
    intStack.push(1);
    intStack.push(2);
    intStack.push(3);
    intStack.push(4);
    intStack.push(5);

    std::cout << "Top element: " << intStack.peek() << std::endl; //  5
    intStack.pop();

    std::cout << "Top element after pop: " << intStack.peek() << std::endl; //  4

    Stack<double> doubleStack{ 1.1, 2.2, 3.3 };

    std::cout << "Top element in double stack: " << doubleStack.peek() << std::endl; //  3.3

    Stack<std::string> stringStack;
    stringStack.push("Hello");
    stringStack.push("Friend");
    
    std::cout << "Top element in string stack: " << stringStack.peek() << std::endl;  //"Friend"

    return 0;
}
